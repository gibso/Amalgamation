%% COINVENT naturals and lists example
%% =================================
%% ### Authors:
%% - Ewen MacLean (ewenmaclean@gmail.com)
%% - Manfred Eppe (meppe@iiia.csic.es)
%% - Roberto Confalonieri (confalonieri@iiia.csic.es)
%% This is the naturals and lists example where the eureka lemma for lists is build with the fact and qfact from the naturals. See LPNMR 2015 paper for details

spec SemSys = 
  sort PriorityDummySort
  op prioDummyOp : PriorityDummySort
end


spec Nat = SemSys then
   sort Element
   sort Nat   
   op zero:Nat                    %% maps to nil  / null
   op s: Element * Nat -> Nat     %% maps to cons / constructor
   op times : Nat * Nat -> Nat    %% maps to app  / auxfunc
   op fact: Nat -> Nat            %% maps to rev  / recfunc
   op qfact: Nat * Nat -> Nat     %% maps to qref / qrecfunc
   op c: Element  %% the canonical element
   op plus : Nat * Nat -> Nat     %% another aux function
   
   forall x,y:Nat
       . fact(zero) = s(c,zero)                                             %(Ax-factZeroSuccZero:p:2)%  
       . fact(s(c,x)) = times(fact(x),s(c,x))                               %(Ax-multiplyNumberWithFactorial:p:2)%
       . qfact(zero,x) = x                                                  %(Ax-qfactzerozero:p:2)% 
       . qfact(s(c,x),y) = times(qfact(x,s(c,x)),y)                         %(Ax-qfacttimessucc:p:2)% 
       . plus(zero,x) = x                                                   %(Ax-zeroPlusEqual:p:1)%
       . times(zero,x) = zero                                               %(Ax-multizerozero:p:1)%
       . times(s(c,x),y) = plus(y,times(x,y))                               %(Ax-timesPlusRel:p:1)%
       . plus(s(c,x),y) = s(c,plus(x,y))                                    %(Ax-plusSucc:p:1)%  
       
       %% These are the theormes of interest
       . times(fact(x),y) = qfact(x,y)                                      %(Ax-heurekaLemmaNat:p:3)% %% This is the Eureka lemma that we know is correct for naturals and that we want  to obtain by blending for lists.
       . fact(x) = qfact(x,zero)                                            %(targetTheoremNat:p:3)% %% This is the target theorem that we want to prove using the Eureka lemma

    %% This is our dummy lemma to set priorities of operators, predicats and sorts
    . prioDummyOp = prioDummyOp %(Element:p:3--Nat:p:3--zero:p:2--s:p:3--times:p:2--fact:p:2--qfact:p:2--c:p:1--plus:p:1)%
end


spec List = SemSys then
  sort El
  sort L
     op nil : L                 %% maps to zero   / null
     op cons : El*L -> L        %% maps to s      / constructor
     op app : L * L -> L        %% maps to times  / auxfunc
     op rev : L -> L            %% maps to fact   / recfunc
     op qrev : L * L -> L       %% maps to qfact  / qrecfunc
     forall x,y: L, h : El
       . rev(nil) = nil                             %(Ax-revnilnil:p:2)% 
       . rev(cons(h,x)) = app(rev(x),cons(h,nil))   %(Ax-revcons:p:2)%      
       . qrev(nil,x) = x                            %(Ax-qrevnilxx:p:2)%
       . qrev(cons(h,x),y) = qrev(x,cons(h,y))      %(Ax-qrevCons:p:2)%
       . app(nil,x) = x                             %(Ax-appNilIsId:p:1)%       
       . app(cons(h,x),y) = cons(h,app(x,y))        %(Ax-appCons:p:1)%       

       %% These are the theormes of interest
       . rev(x) = qrev(x,nil)                       %(Ax-targetTheoremLists:p:3)% %% This is the target theorem of that we know it's correct for naturals, and that we want to "translate" to the theory of lists.
       %% . app(rev(x),y) = qrev(x,y) %(Ax-heurekaLemmaLists:p:3)% %% This is the eureka lemma that we want to have for lists.
       
       %% This is our dummy lemma to set priorities of operators, predicats and sorts
     . prioDummyOp = prioDummyOp %(El:p:3--L:p:3--nil:p:2--cons:p:3--app:p:2--rev:p:2--qrev:p:2)%
end

